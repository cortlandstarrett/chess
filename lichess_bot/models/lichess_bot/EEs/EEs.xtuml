// BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

within lichess_bot is

  package EEs is
    @key_letters("ChessLib");
    @realized;
    external ChessLib is
      //! Takes as input a string representing a move in LAN and returns
      //! the destination file as a string /[a-h]/
      @dialect("oal");
      bridge destFile(move: in string) return string;

      //! Takes as input a string representing a move in LAN and returns
      //! the destination rank as an integer 1-8
      @dialect("oal");
      bridge destRank(move: in string) return integer;

      //! Takes as input a FEN string representing the current position
      //! Returns a list of legal moves in the position
      @dialect("oal");
      bridge legalMoves(fen: in string, legal_moves: out sequence (218) of string) return integer;

      //! Takes as input a FEN string and a list of moves represenging the
      //! current position. The position is determined by applying the
      //! list of moves in order to the position indicated by the FEN
      //! string. The exact string "startpos" is taken to be the standard
      //! starting position. Returns a FEN string representing the
      //! position
      @dialect("oal");
      bridge movesToFEN(initialFen: in string, moves: in sequence (1024) of string) return string;

      //! Takes as input a string representing a move in LAN and returns
      //! the source file as a string /[a-h]/
      @dialect("oal");
      bridge sourceFile(move: in string) return string;

      //! Takes as input a string representing a move in LAN and returns
      //! the source rank as an integer 1-8
      @dialect("oal");
      bridge sourceRank(move: in string) return integer;

      //! Returns a FEN string representing the starting position.
      @dialect("oal");
      bridge startpos() return string;

    end external;

    @key_letters("PROP");
    @realized;
    external Properties is
      @dialect("oal");
      bridge getBoolean(properties: in Properties, name: in string, default_value: in boolean) return boolean;

      @dialect("oal");
      bridge getInteger(properties: in Properties, name: in string, default_value: in integer) return integer;

      @dialect("oal");
      bridge getString(properties: in Properties, name: in string, default_value: in string) return string;

      @dialect("oal");
      bridge loadProperties(file_name: in string) return Properties;

    end external;

  end package;

end;
